#!/bin/bash
set -o errexit
set -o pipefail
set -o nounset
set -o xtrace
# set -eox pipefail #safety for script


echo "=============================deploy kong keycloak book service============================================================="

# Clone example repository
git clone https://github.com/ivangfr/springboot-testing-mongodb-keycloak.git
cd springboot-testing-mongodb-keycloak

# Set Minikube host
eval $(minikube docker-env)

# Build book-service Docker image so that we don't need to push it to Docker Registry.
./gradlew book-service:clean book-service:jibDockerBuild -x test -x integrationTest

# back to Host machine Docker Daemon
eval $(minikube docker-env -u)

# Create a namespace
kubectl create namespace dev

# list all namespaces
kubectl get namespaces

# Install services
# install MySQL, Postgres, MongoDB Kong and Keycloak
cd kubernetes-environment/book-service-kong-keycloak
bash install-services.sh

# Check the status/progress of the service installation
kubectl get pods --namespace dev


# configure Keycloak METHOD 1 Running a script
cd springboot-testing-mongodb-keycloak
# Get KEYCLOAK_URL environment variable
KEYCLOAK_URL="$(minikube ip):$(kubectl get services --namespace dev my-keycloak-http -o go-template='{{(index .spec.ports 0).nodePort}}')"
# Run the following script to configure Keycloak for book-service applicationRun the following script to configure Keycloak for book-service application
bash init-keycloak.sh $KEYCLOAK_URL


# configure Keycloak METHOD 2 Using Keycloak website
# minikube service my-keycloak-http --namespace dev


# Create application database secrets
kubectl create secret --namespace dev generic book-service-db \
 --from-literal=username=bookuser --from-literal=password=bookpass

# list the secrets present in dev namespace
kubectl get secrets --namespace dev
# get more information about book-service-db secret
kubectl get secrets --namespace dev book-service-db -o yaml


# Install book-service
cd kubernetes-environment/book-service-kong-keycloak
kubectl apply --namespace dev -f deployment-files/bookservice-deployment.yaml


# Configuring Kong
# Get KONG_ADMIN_URL and KONG_PROXY_URL environment variables
KONG_ADMIN_URL="$(minikube ip):$(kubectl get services --namespace dev my-kong-kong-admin -o go-template='{{(index .spec.ports 0).nodePort}}')"
KONG_PROXY_URL="$(minikube ip):$(kubectl get services --namespace dev my-kong-kong-proxy -o go-template='{{(index .spec.ports 0).nodePort}}')"


# Add service book-service
curl -i -X POST https://$KONG_ADMIN_URL/services/ \
  -d 'name=book-service' \
  -d 'protocol=http' \
  -d 'host=bookservice-service' \
  -d 'port=8080' \
  --insecure

# Add book-service route
curl -i -X POST https://$KONG_ADMIN_URL/services/book-service/routes/ \
  -d "protocols[]=http" \
  -d "hosts[]=book-service" \
  -d "strip_path=false" \
  --insecure

#  test the added route
curl -i http://$KONG_PROXY_URL/actuator/health -H 'Host: book-service'

# Add Rate Limiting plugin to book-service service
curl -X POST https://$KONG_ADMIN_URL/services/book-service/plugins \
  -d "name=rate-limiting"  \
  -d "config.minute=10" \
  --insecure

#  test the added route
# After exceeding 10 calls in one minute
curl -i http://$KONG_PROXY_URL/actuator/health -H 'Host: book-service'

# kubernetes-environment/book-service-kong-keycloak
# Get KONG_PROXY_URL environment variable
KONG_PROXY_URL="$(minikube ip):$(kubectl get services --namespace dev my-kong-kong-proxy -o go-template='{{(index .spec.ports 0).nodePort}}')"

# Create BOOK_SERVICE_CLIENT_SECRET environment variable that contains the Client Secret generated by Keycloak to book-service at Configure Keycloak

# Call GET /api/books endpoint
# curl -i http://$KONG_PROXY_URL/api/books -H 'Host: book-service'

# Call POST /api/books endpoint without access token
curl -i -X POST http://$KONG_PROXY_URL/api/books -H 'Host: book-service' \
  -H "Content-Type: application/json" \
  -d '{ "authorName": "ivan", "title": "java 8", "price": 10.5 }'

# Get access token from Keycloak
BEARER_MY_ACCESS_TOKEN=$(./get-access-token.sh $BOOK_SERVICE_CLIENT_SECRET)
echo $BEARER_MY_ACCESS_TOKEN

# Call POST /api/books endpoint informing the access token  
curl -i -X POST http://$KONG_PROXY_URL/api/books -H 'Host: book-service' \
  -H "Authorization: $BEARER_MY_ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{ "authorName": "ivan", "title": "java 8", "price": 10.5 }'


#CLEAN UP
helm delete --namespace dev my-mysql
helm delete --namespace dev my-mongodb
helm delete --namespace dev my-keycloak
helm delete --namespace dev my-postgres
helm delete --namespace dev my-kong
kubectl delete --namespace dev -f deployment-files/bookservice-deployment.yaml
kubectl delete namespace dev


